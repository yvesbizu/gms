{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yvesb\\\\OneDrive\\\\Desktop\\\\Hardhat\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\yvesb\\\\OneDrive\\\\Desktop\\\\Hardhat\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar CID = require('cids');\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\n/**\n * Link represents an IPFS Merkle DAG Link between Nodes.\n */\nvar DAGLink = /*#__PURE__*/function () {\n  /**\n   * @param {string | undefined | null} name\n   * @param {number} size\n   * @param {CID | string | Uint8Array} cid\n   */\n  function DAGLink(name, size, cid) {\n    _classCallCheck(this, DAGLink);\n    if (!cid) {\n      throw new Error('A link requires a cid to point to');\n    }\n\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n    this.Name = name || '';\n    this.Tsize = size;\n    this.Hash = new CID(cid);\n    Object.defineProperties(this, {\n      _nameBuf: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n  _createClass(DAGLink, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"DAGLink <\".concat(this.Hash.toBaseEncodedString(), \" - name: \\\"\").concat(this.Name, \"\\\", size: \").concat(this.Tsize, \">\");\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (!this._json) {\n        this._json = Object.freeze({\n          name: this.Name,\n          size: this.Tsize,\n          cid: this.Hash.toBaseEncodedString()\n        });\n      }\n      return Object.assign({}, this._json);\n    } // Memoize the Uint8Array representation of name\n    // We need this to sort the links, otherwise\n    // we will reallocate new Uint8Arrays every time\n  }, {\n    key: \"nameAsBuffer\",\n    get: function get() {\n      if (this._nameBuf != null) {\n        return this._nameBuf;\n      }\n      this._nameBuf = uint8ArrayFromString(this.Name);\n      return this._nameBuf;\n    }\n  }]);\n  return DAGLink;\n}();\nmodule.exports = DAGLink;","map":null,"metadata":{},"sourceType":"script"}