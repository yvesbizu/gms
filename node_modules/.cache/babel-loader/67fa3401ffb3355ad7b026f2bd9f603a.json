{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yvesb\\\\OneDrive\\\\Desktop\\\\Hardhat\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\yvesb\\\\OneDrive\\\\Desktop\\\\Hardhat\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar sortLinks = require('./sortLinks');\nvar DAGLink = require('../dag-link/dagLink');\nvar _require = require('../dag-link/util'),\n  createDagLinkFromB58EncodedHash = _require.createDagLinkFromB58EncodedHash;\nvar _require2 = require('../serialize'),\n  serializeDAGNode = _require2.serializeDAGNode;\nvar _toDAGLink = require('./toDagLink');\nvar _addLink = require('./addLink');\nvar _rmLink = require('./rmLink');\nvar uint8ArrayFromString = require('uint8arrays/from-string');\nvar uint8ArrayToString = require('uint8arrays/to-string');\n\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('../types').DAGLinkLike} DAGLinkLike\n */\nvar DAGNode = /*#__PURE__*/function () {\n  /**\n   *@param {Uint8Array | string} [data]\n   * @param {(DAGLink | DAGLinkLike)[]} links\n   * @param {number | null} [serializedSize]\n   */\n  function DAGNode(data) {\n    var links = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var serializedSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    _classCallCheck(this, DAGNode);\n    if (!data) {\n      data = new Uint8Array(0);\n    }\n    if (typeof data === 'string') {\n      data = uint8ArrayFromString(data);\n    }\n    if (!(data instanceof Uint8Array)) {\n      throw new Error('Passed \\'data\\' is not a Uint8Array or a String!');\n    }\n    if (serializedSize !== null && typeof serializedSize !== 'number') {\n      throw new Error('Passed \\'serializedSize\\' must be a number!');\n    }\n    var sortedLinks = links.map(function (link) {\n      return link instanceof DAGLink ? link : createDagLinkFromB58EncodedHash(link);\n    });\n    sortLinks(sortedLinks);\n    this.Data = data;\n    this.Links = sortedLinks;\n    Object.defineProperties(this, {\n      _serializedSize: {\n        value: serializedSize,\n        writable: true,\n        enumerable: false\n      },\n      _size: {\n        value: null,\n        writable: true,\n        enumerable: false\n      }\n    });\n  }\n  _createClass(DAGNode, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      if (!this._json) {\n        this._json = Object.freeze({\n          data: this.Data,\n          links: this.Links.map(function (l) {\n            return l.toJSON();\n          }),\n          size: this.size\n        });\n      }\n      return Object.assign({}, this._json);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"DAGNode <data: \\\"\".concat(uint8ArrayToString(this.Data, 'base64urlpad'), \"\\\", links: \").concat(this.Links.length, \", size: \").concat(this.size, \">\");\n    }\n  }, {\n    key: \"_invalidateCached\",\n    value: function _invalidateCached() {\n      this._serializedSize = null;\n      this._size = null;\n    }\n    /**\n     * @param {DAGLink | import('../types').DAGLinkLike} link\n     */\n  }, {\n    key: \"addLink\",\n    value: function addLink(link) {\n      this._invalidateCached();\n      return _addLink(this, link);\n    }\n    /**\n     * @param {DAGLink | string | CID} link\n     */\n  }, {\n    key: \"rmLink\",\n    value: function rmLink(link) {\n      this._invalidateCached();\n      return _rmLink(this, link);\n    }\n    /**\n     * @param {import('./toDagLink').ToDagLinkOptions} [options]\n     */\n  }, {\n    key: \"toDAGLink\",\n    value: function toDAGLink(options) {\n      return _toDAGLink(this, options);\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var buf = serializeDAGNode(this);\n      this._serializedSize = buf.length;\n      return buf;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (this._size == null) {\n        var serializedSize;\n        if (serializedSize == null) {\n          this._serializedSize = this.serialize().length;\n          serializedSize = this._serializedSize;\n        }\n        this._size = this.Links.reduce(function (sum, l) {\n          return sum + l.Tsize;\n        }, serializedSize);\n      }\n      return this._size;\n    },\n    set: function set(size) {\n      throw new Error(\"Can't set property: 'size' is immutable\");\n    }\n  }]);\n  return DAGNode;\n}();\nmodule.exports = DAGNode;","map":null,"metadata":{},"sourceType":"script"}