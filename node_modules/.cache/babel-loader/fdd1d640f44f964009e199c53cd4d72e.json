{"ast":null,"code":"'use strict';\n\nvar _require = require('./dag'),\n  PBNode = _require.PBNode;\nvar DAGLink = require('./dag-link/dagLink');\nvar DAGNode = require('./dag-node/dagNode');\nvar _require2 = require('./serialize'),\n  serializeDAGNode = _require2.serializeDAGNode,\n  serializeDAGNodeLike = _require2.serializeDAGNodeLike;\nvar genCid = require('./genCid');\n\n/**\n * @typedef {import('./types').DAGLinkLike} DAGLinkLike\n */\n\n/**\n * Calculate the CID of the binary blob\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {import('./genCid').GenCIDOptions} [userOptions] - Options to create the CID\n */\nvar cid = function cid(binaryBlob, userOptions) {\n  return genCid.cid(binaryBlob, userOptions);\n};\n\n/**\n * Serialize internal representation into a binary PB block\n *\n * @param {DAGNode | { Data?: Uint8Array, Links?: (DAGLink | DAGLinkLike)[]}} node\n */\nvar serialize = function serialize(node) {\n  if (node instanceof DAGNode) {\n    return serializeDAGNode(node);\n  } else {\n    return serializeDAGNodeLike(node.Data, node.Links);\n  }\n};\n\n/**\n * Deserialize PB block into the internal representation.\n *\n * @param {Uint8Array} buffer - Binary representation of a PB block\n */\nvar deserialize = function deserialize(buffer) {\n  var message = PBNode.decode(buffer);\n  var pbn = PBNode.toObject(message, {\n    defaults: false,\n    arrays: true,\n    longs: Number,\n    objects: false\n  });\n\n  /** @type {DAGLink[]} */\n  var links = pbn.Links.map(function ( /** @type {DAGLinkLike} */link) {\n    // @ts-ignore\n    return new DAGLink(link.Name, link.Tsize, link.Hash);\n  });\n  var data = pbn.Data == null ? new Uint8Array(0) : pbn.Data;\n  return new DAGNode(data, links, buffer.byteLength);\n};\nmodule.exports = {\n  codec: genCid.codec,\n  defaultHashAlg: genCid.defaultHashAlg,\n  serialize: serialize,\n  deserialize: deserialize,\n  cid: cid\n};","map":null,"metadata":{},"sourceType":"script"}