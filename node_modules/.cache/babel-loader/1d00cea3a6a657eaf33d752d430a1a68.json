{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar _require = require('./util'),\n  encodeText = _require.encodeText;\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nvar Base = /*#__PURE__*/function () {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  function Base(name, code, factory, alphabet) {\n    _classCallCheck(this, Base);\n    this.name = name;\n    this.code = code;\n    this.codeBuf = encodeText(this.code);\n    this.alphabet = alphabet;\n    this.codec = factory(alphabet);\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  _createClass(Base, [{\n    key: \"encode\",\n    value: function encode(buf) {\n      return this.codec.encode(buf);\n    }\n    /**\n     * @param {string} string\n     * @returns {Uint8Array}\n     */\n  }, {\n    key: \"decode\",\n    value: function decode(string) {\n      var _iterator = _createForOfIteratorHelper(string),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var char = _step.value;\n          if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n            throw new Error(\"invalid character '\".concat(char, \"' in '\").concat(string, \"'\"));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return this.codec.decode(string);\n    }\n  }]);\n  return Base;\n}();\nmodule.exports = Base;","map":null,"metadata":{},"sourceType":"script"}