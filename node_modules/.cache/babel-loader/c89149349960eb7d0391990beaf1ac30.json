{"ast":null,"code":"/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict';\n\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecCode} CodecCode */\nvar _objectSpread = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar varint = require('varint');\nvar _require = require('uint8arrays/concat'),\n  uint8ArrayConcat = _require.concat;\nvar util = require('./util');\nvar _require2 = require('./maps'),\n  nameToVarint = _require2.nameToVarint,\n  constantToCode = _require2.constantToCode,\n  nameToCode = _require2.nameToCode,\n  codeToName = _require2.codeToName;\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix(multicodecStrOrCode, data) {\n  var prefix;\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode);\n  } else {\n    if (nameToVarint[multicodecStrOrCode]) {\n      prefix = nameToVarint[multicodecStrOrCode];\n    } else {\n      throw new Error('multicodec not recognized');\n    }\n  }\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length);\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix(data) {\n  varint.decode( /** @type {Buffer} */data);\n  return data.slice(varint.decode.bytes);\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getNameFromData(prefixedData) {\n  var code = /** @type {CodecCode} */varint.decode( /** @type {Buffer} */prefixedData);\n  var name = codeToName[code];\n  if (name === undefined) {\n    throw new Error(\"Code \\\"\".concat(code, \"\\\" not found\"));\n  }\n  return name;\n}\n\n/**\n * Get the codec name from a code.\n *\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getNameFromCode(codec) {\n  return codeToName[codec];\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getCodeFromName(name) {\n  var code = nameToCode[name];\n  if (code === undefined) {\n    throw new Error(\"Codec \\\"\".concat(name, \"\\\" not found\"));\n  }\n  return code;\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCodeFromData(prefixedData) {\n  return (/** @type {CodecCode} */varint.decode( /** @type {Buffer} */prefixedData)\n  );\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getVarintFromName(name) {\n  var code = nameToVarint[name];\n  if (code === undefined) {\n    throw new Error(\"Codec \\\"\".concat(name, \"\\\" not found\"));\n  }\n  return code;\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecCode} code\n * @returns {Uint8Array}\n */\nfunction getVarintFromCode(code) {\n  return util.varintEncode(code);\n}\n\n/**\n * Get the codec name of the prefixed data.\n *\n * @deprecated use getNameFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec(prefixedData) {\n  return getNameFromData(prefixedData);\n}\n\n/**\n * Get the codec name from a code.\n *\n * @deprecated use getNameFromCode instead.\n * @param {CodecCode} codec\n * @returns {CodecName}\n */\nfunction getName(codec) {\n  return getNameFromCode(codec);\n}\n\n/**\n * Get the code of the codec\n *\n * @deprecated use getCodeFromName instead.\n * @param {CodecName} name\n * @returns {CodecCode}\n */\nfunction getNumber(name) {\n  return getCodeFromName(name);\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @deprecated use getCodeFromData instead.\n * @param {Uint8Array} prefixedData\n * @returns {CodecCode}\n */\nfunction getCode(prefixedData) {\n  return getCodeFromData(prefixedData);\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @deprecated use getVarintFromName instead.\n * @param {CodecName} name\n * @returns {Uint8Array}\n */\nfunction getCodeVarint(name) {\n  return getVarintFromName(name);\n}\n\n/**\n * Get the varint of a code.\n *\n * @deprecated use getVarintFromCode instead.\n * @param {CodecCode} code\n * @returns {Array.<number>}\n */\nfunction getVarint(code) {\n  return Array.from(getVarintFromCode(code));\n}\nmodule.exports = _objectSpread({\n  addPrefix: addPrefix,\n  rmPrefix: rmPrefix,\n  getNameFromData: getNameFromData,\n  getNameFromCode: getNameFromCode,\n  getCodeFromName: getCodeFromName,\n  getCodeFromData: getCodeFromData,\n  getVarintFromName: getVarintFromName,\n  getVarintFromCode: getVarintFromCode,\n  // Deprecated\n  getCodec: getCodec,\n  getName: getName,\n  getNumber: getNumber,\n  getCode: getCode,\n  getCodeVarint: getCodeVarint,\n  getVarint: getVarint\n}, constantToCode, {\n  // Export the maps\n  nameToVarint: nameToVarint,\n  nameToCode: nameToCode,\n  codeToName: codeToName\n});","map":null,"metadata":{},"sourceType":"script"}