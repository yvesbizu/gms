{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yvesb\\\\OneDrive\\\\Desktop\\\\Hardhat\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\yvesb\\\\OneDrive\\\\Desktop\\\\Hardhat\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar CID = require('cids');\nvar _require = require('../package.json'),\n  version = _require.version;\nvar blockSymbol = Symbol.for('@ipld/js-ipld-block/block');\nvar readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\n\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @example\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\n */\nvar Block = /*#__PURE__*/function () {\n  /**\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\n   * @param {CID} cid - The cid of the data\n   */\n  function Block(data, cid) {\n    _classCallCheck(this, Block);\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array');\n    }\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID');\n    }\n    this.data = data;\n    this.cid = cid;\n    Object.defineProperties(this, {\n      data: readonly,\n      cid: readonly\n    });\n  }\n\n  /**\n   * The data of this block.\n   *\n   * @deprecated\n   * @type {Uint8Array}\n   */\n  _createClass(Block, [{\n    key: \"_data\",\n    get: function get() {\n      deprecateData();\n      return this.data;\n    }\n    /**\n     * The cid of the data this block represents.\n     *\n     * @deprecated\n     * @type {CID}\n     */\n  }, {\n    key: \"_cid\",\n    get: function get() {\n      deprecateCID();\n      return this.cid;\n    }\n  }, {\n    key: Symbol.toStringTag,\n    get: function get() {\n      return 'Block';\n    }\n  }, {\n    key: blockSymbol,\n    get: function get() {\n      return true;\n    }\n    /**\n     * Check if the given value is a Block.\n     *\n     * @param {any} other\n     * @returns {other is Block}\n     */\n  }], [{\n    key: \"isBlock\",\n    value: function isBlock(other) {\n      return Boolean(other && other[blockSymbol]);\n    }\n  }]);\n  return Block;\n}();\n/**\n * @param {RegExp} range\n * @param {string} message\n * @returns {() => void}\n */\nvar deprecate = function deprecate(range, message) {\n  var warned = false;\n  return function () {\n    if (range.test(version)) {\n      if (!warned) {\n        warned = true;\n        // eslint-disable-next-line no-console\n        console.warn(message);\n      }\n    } else {\n      throw new Error(message);\n    }\n  };\n};\nvar deprecateCID = deprecate(/^0\\.10|^0\\.11/, 'block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead');\nvar deprecateData = deprecate(/^0\\.10|^0.11/, 'block._data is deprecated and will be removed in 0.12 release. Please use block.data instead');\nmodule.exports = Block;","map":null,"metadata":{},"sourceType":"script"}