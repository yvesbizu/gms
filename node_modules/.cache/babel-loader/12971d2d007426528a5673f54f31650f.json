{"ast":null,"code":"'use strict';\n\nvar CID = require('cids');\nvar uint8ArrayEquals = require('uint8arrays/equals');\n\n/**\n * @typedef {import('../dag-link/dagLink')} DAGLink\n */\n\n/**\n *\n * @param {import('./dagNode')} dagNode\n * @param {string | CID | Uint8Array | DAGLink} nameOrCid\n */\nvar rmLink = function rmLink(dagNode, nameOrCid) {\n  var predicate = null;\n\n  // It's a name\n  if (typeof nameOrCid === 'string') {\n    predicate = function predicate( /** @type {DAGLink} */link) {\n      return link.Name === nameOrCid;\n    };\n  } else if (nameOrCid instanceof Uint8Array) {\n    predicate = function predicate( /** @type {DAGLink} */link) {\n      return uint8ArrayEquals(link.Hash.bytes, nameOrCid);\n    };\n  } else if (CID.isCID(nameOrCid)) {\n    predicate = function predicate( /** @type {DAGLink} */link) {\n      return uint8ArrayEquals(link.Hash.bytes, nameOrCid.bytes);\n    };\n  }\n  if (predicate) {\n    var links = dagNode.Links;\n    var index = 0;\n    while (index < links.length) {\n      var link = links[index];\n      if (predicate(link)) {\n        links.splice(index, 1);\n      } else {\n        index++;\n      }\n    }\n  } else {\n    throw new Error('second arg needs to be a name or CID');\n  }\n};\nmodule.exports = rmLink;","map":null,"metadata":{},"sourceType":"script"}