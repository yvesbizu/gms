{"ast":null,"code":"/* eslint-disable no-undef */\n'use strict';\n\nvar _defineProperty = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\nvar _objectSpread = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\nvar _require = require('./http/fetch'),\n  _fetch = _require.fetch,\n  Request = _require.Request,\n  Headers = _require.Headers;\nvar _require2 = require('./http/error'),\n  TimeoutError = _require2.TimeoutError,\n  HTTPError = _require2.HTTPError;\nvar merge = require('merge-options').bind({\n  ignoreUndefined: true\n});\nvar _require3 = require('iso-url'),\n  URL = _require3.URL,\n  URLSearchParams = _require3.URLSearchParams;\nvar _require4 = require('native-abort-controller'),\n  AbortController = _require4.AbortController;\nvar anySignal = require('any-signal');\n\n/**\n * @typedef {import('stream').Readable} NodeReadableStream\n * @typedef {import('./types').HTTPOptions} HTTPOptions\n * @typedef {import('./types').ExtendedResponse} ExtendedResponse\n */\n\n/**\n * @template TResponse\n * @param {Promise<TResponse>} promise\n * @param {number | undefined} ms\n * @param {AbortController} abortController\n * @returns {Promise<TResponse>}\n */\nvar timeout = function timeout(promise, ms, abortController) {\n  if (ms === undefined) {\n    return promise;\n  }\n  var start = Date.now();\n  var timedOut = function timedOut() {\n    var time = Date.now() - start;\n    return time >= ms;\n  };\n  return new Promise(function (resolve, reject) {\n    var timeoutID = setTimeout(function () {\n      if (timedOut()) {\n        reject(new TimeoutError());\n        abortController.abort();\n      }\n    }, ms);\n\n    /**\n     * @param {(value: any) => void } next\n     */\n    var after = function after(next) {\n      /**\n       * @param {any} res\n       */\n      var fn = function fn(res) {\n        clearTimeout(timeoutID);\n        if (timedOut()) {\n          reject(new TimeoutError());\n          return;\n        }\n        next(res);\n      };\n      return fn;\n    };\n    promise.then(after(resolve), after(reject));\n  });\n};\nvar defaults = {\n  throwHttpErrors: true,\n  credentials: 'same-origin'\n};\nvar HTTP = /*#__PURE__*/function () {\n  /**\n   *\n   * @param {HTTPOptions} options\n   */\n  function HTTP() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, HTTP);\n    /** @type {HTTPOptions} */\n    this.opts = merge(defaults, options);\n  }\n\n  /**\n   * Fetch\n   *\n   * @param {string | Request} resource\n   * @param {HTTPOptions} options\n   * @returns {Promise<ExtendedResponse>}\n   */\n  _createClass(HTTP, [{\n    key: \"fetch\",\n    value: function () {\n      var _fetch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(resource) {\n        var options,\n          opts,\n          headers,\n          url,\n          searchParams,\n          transformSearchParams,\n          json,\n          abortController,\n          signal,\n          response,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n              /** @type {HTTPOptions} */\n              opts = merge(this.opts, options);\n              headers = new Headers(opts.headers); // validate resource type\n              if (!(typeof resource !== 'string' && !(resource instanceof URL || resource instanceof Request))) {\n                _context2.next = 5;\n                break;\n              }\n              throw new TypeError('`resource` must be a string, URL, or Request');\n            case 5:\n              url = new URL(resource.toString(), opts.base);\n              searchParams = opts.searchParams, transformSearchParams = opts.transformSearchParams, json = opts.json;\n              if (searchParams) {\n                if (typeof transformSearchParams === 'function') {\n                  // @ts-ignore\n                  url.search = transformSearchParams(new URLSearchParams(opts.searchParams));\n                } else {\n                  // @ts-ignore\n                  url.search = new URLSearchParams(opts.searchParams);\n                }\n              }\n              if (json) {\n                opts.body = JSON.stringify(opts.json);\n                headers.set('content-type', 'application/json');\n              }\n              abortController = new AbortController(); // @ts-ignore\n              signal = anySignal([abortController.signal, opts.signal]);\n              _context2.next = 13;\n              return timeout(_fetch(url.toString(), _objectSpread({}, opts, {\n                signal: signal,\n                timeout: undefined,\n                headers: headers\n              })), opts.timeout, abortController);\n            case 13:\n              response = _context2.sent;\n              if (!(!response.ok && opts.throwHttpErrors)) {\n                _context2.next = 19;\n                break;\n              }\n              if (!opts.handleError) {\n                _context2.next = 18;\n                break;\n              }\n              _context2.next = 18;\n              return opts.handleError(response);\n            case 18:\n              throw new HTTPError(response);\n            case 19:\n              response.iterator = function () {\n                return fromStream(response.body);\n              };\n              response.ndjson = /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, chunk;\n                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                  while (1) switch (_context.prev = _context.next) {\n                    case 0:\n                      _iteratorAbruptCompletion = false;\n                      _didIteratorError = false;\n                      _context.prev = 2;\n                      _iterator = _asyncIterator(ndjson(response.iterator()));\n                    case 4:\n                      _context.next = 6;\n                      return _awaitAsyncGenerator(_iterator.next());\n                    case 6:\n                      if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                        _context.next = 18;\n                        break;\n                      }\n                      chunk = _step.value;\n                      if (!options.transform) {\n                        _context.next = 13;\n                        break;\n                      }\n                      _context.next = 11;\n                      return options.transform(chunk);\n                    case 11:\n                      _context.next = 15;\n                      break;\n                    case 13:\n                      _context.next = 15;\n                      return chunk;\n                    case 15:\n                      _iteratorAbruptCompletion = false;\n                      _context.next = 4;\n                      break;\n                    case 18:\n                      _context.next = 24;\n                      break;\n                    case 20:\n                      _context.prev = 20;\n                      _context.t0 = _context[\"catch\"](2);\n                      _didIteratorError = true;\n                      _iteratorError = _context.t0;\n                    case 24:\n                      _context.prev = 24;\n                      _context.prev = 25;\n                      if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                        _context.next = 29;\n                        break;\n                      }\n                      _context.next = 29;\n                      return _awaitAsyncGenerator(_iterator.return());\n                    case 29:\n                      _context.prev = 29;\n                      if (!_didIteratorError) {\n                        _context.next = 32;\n                        break;\n                      }\n                      throw _iteratorError;\n                    case 32:\n                      return _context.finish(29);\n                    case 33:\n                      return _context.finish(24);\n                    case 34:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }, _callee, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n              }));\n              return _context2.abrupt(\"return\", response);\n            case 22:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function fetch(_x2) {\n        return _fetch2.apply(this, arguments);\n      }\n      return fetch;\n    }()\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n  }, {\n    key: \"post\",\n    value: function post(resource) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.fetch(resource, _objectSpread({}, options, {\n        method: 'POST'\n      }));\n    }\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n  }, {\n    key: \"get\",\n    value: function get(resource) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.fetch(resource, _objectSpread({}, options, {\n        method: 'GET'\n      }));\n    }\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n  }, {\n    key: \"put\",\n    value: function put(resource) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.fetch(resource, _objectSpread({}, options, {\n        method: 'PUT'\n      }));\n    }\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete(resource) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.fetch(resource, _objectSpread({}, options, {\n        method: 'DELETE'\n      }));\n    }\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n  }, {\n    key: \"options\",\n    value: function options(resource) {\n      var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.fetch(resource, _objectSpread({}, _options, {\n        method: 'OPTIONS'\n      }));\n    }\n  }]);\n  return HTTP;\n}();\n/**\n * Parses NDJSON chunks from an iterator\n *\n * @param {AsyncIterable<Uint8Array>} source\n * @returns {AsyncIterable<any>}\n */\nvar ndjson = /*#__PURE__*/function () {\n  var _ref2 = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(source) {\n    var decoder, buf, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, chunk, lines, i, l;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          decoder = new TextDecoder();\n          buf = '';\n          _iteratorAbruptCompletion2 = false;\n          _didIteratorError2 = false;\n          _context3.prev = 4;\n          _iterator2 = _asyncIterator(source);\n        case 6:\n          _context3.next = 8;\n          return _awaitAsyncGenerator(_iterator2.next());\n        case 8:\n          if (!(_iteratorAbruptCompletion2 = !(_step2 = _context3.sent).done)) {\n            _context3.next = 25;\n            break;\n          }\n          chunk = _step2.value;\n          buf += decoder.decode(chunk, {\n            stream: true\n          });\n          lines = buf.split(/\\r?\\n/);\n          i = 0;\n        case 13:\n          if (!(i < lines.length - 1)) {\n            _context3.next = 21;\n            break;\n          }\n          l = lines[i].trim();\n          if (!(l.length > 0)) {\n            _context3.next = 18;\n            break;\n          }\n          _context3.next = 18;\n          return JSON.parse(l);\n        case 18:\n          i++;\n          _context3.next = 13;\n          break;\n        case 21:\n          buf = lines[lines.length - 1];\n        case 22:\n          _iteratorAbruptCompletion2 = false;\n          _context3.next = 6;\n          break;\n        case 25:\n          _context3.next = 31;\n          break;\n        case 27:\n          _context3.prev = 27;\n          _context3.t0 = _context3[\"catch\"](4);\n          _didIteratorError2 = true;\n          _iteratorError2 = _context3.t0;\n        case 31:\n          _context3.prev = 31;\n          _context3.prev = 32;\n          if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n            _context3.next = 36;\n            break;\n          }\n          _context3.next = 36;\n          return _awaitAsyncGenerator(_iterator2.return());\n        case 36:\n          _context3.prev = 36;\n          if (!_didIteratorError2) {\n            _context3.next = 39;\n            break;\n          }\n          throw _iteratorError2;\n        case 39:\n          return _context3.finish(36);\n        case 40:\n          return _context3.finish(31);\n        case 41:\n          buf += decoder.decode();\n          buf = buf.trim();\n          if (!(buf.length !== 0)) {\n            _context3.next = 46;\n            break;\n          }\n          _context3.next = 46;\n          return JSON.parse(buf);\n        case 46:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[4, 27, 31, 41], [32,, 36, 40]]);\n  }));\n  return function ndjson(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n * Stream to AsyncIterable\n *\n * @template TChunk\n * @param {ReadableStream<TChunk> | NodeReadableStream | null} source\n * @returns {AsyncIterable<TChunk>}\n */\nvar fromStream = function fromStream(source) {\n  // Workaround for https://github.com/node-fetch/node-fetch/issues/766\n  if (isNodeReadableStream(source)) {\n    var iter = source[Symbol.asyncIterator]();\n    return _defineProperty({}, Symbol.asyncIterator, function () {\n      return {\n        next: iter.next.bind(iter),\n        return: function _return(value) {\n          source.destroy();\n          if (typeof iter.return === 'function') {\n            return iter.return();\n          }\n          return Promise.resolve({\n            done: true,\n            value: value\n          });\n        }\n      };\n    });\n  }\n  if (isWebReadableStream(source)) {\n    var reader = source.getReader();\n    return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var _yield$_awaitAsyncGen, done, value;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n          case 1:\n            if (!true) {\n              _context4.next = 14;\n              break;\n            }\n            _context4.next = 4;\n            return _awaitAsyncGenerator(reader.read());\n          case 4:\n            _yield$_awaitAsyncGen = _context4.sent;\n            done = _yield$_awaitAsyncGen.done;\n            value = _yield$_awaitAsyncGen.value;\n            if (!done) {\n              _context4.next = 9;\n              break;\n            }\n            return _context4.abrupt(\"return\");\n          case 9:\n            if (!value) {\n              _context4.next = 12;\n              break;\n            }\n            _context4.next = 12;\n            return value;\n          case 12:\n            _context4.next = 1;\n            break;\n          case 14:\n            _context4.prev = 14;\n            reader.releaseLock();\n            return _context4.finish(14);\n          case 17:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4, null, [[0,, 14, 17]]);\n    }))();\n  }\n  if (isAsyncIterable(source)) {\n    return source;\n  }\n  throw new TypeError('Body can\\'t be converted to AsyncIterable');\n};\n\n/**\n * Check if it's an AsyncIterable\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|AsyncIterable<TChunk>} value\n * @returns {value is AsyncIterable<TChunk>}\n */\nvar isAsyncIterable = function isAsyncIterable(value) {\n  return typeof value === 'object' && value !== null && typeof /** @type {any} */value[Symbol.asyncIterator] === 'function';\n};\n\n/**\n * Check for web readable stream\n *\n * @template {unknown} TChunk\n * @template {any} Other\n * @param {Other|ReadableStream<TChunk>} value\n * @returns {value is ReadableStream<TChunk>}\n */\nvar isWebReadableStream = function isWebReadableStream(value) {\n  return value && typeof /** @type {any} */value.getReader === 'function';\n};\n\n/**\n * @param {any} value\n * @returns {value is NodeReadableStream}\n */\nvar isNodeReadableStream = function isNodeReadableStream(value) {\n  return Object.prototype.hasOwnProperty.call(value, 'readable') && Object.prototype.hasOwnProperty.call(value, 'writable');\n};\nHTTP.HTTPError = HTTPError;\nHTTP.TimeoutError = TimeoutError;\nHTTP.streamToAsyncIterator = fromStream;\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.post = function (resource, options) {\n  return new HTTP(options).post(resource, options);\n};\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.get = function (resource, options) {\n  return new HTTP(options).get(resource, options);\n};\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.put = function (resource, options) {\n  return new HTTP(options).put(resource, options);\n};\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.delete = function (resource, options) {\n  return new HTTP(options).delete(resource, options);\n};\n\n/**\n * @param {string | Request} resource\n * @param {HTTPOptions} [options]\n */\nHTTP.options = function (resource, options) {\n  return new HTTP(options).options(resource, options);\n};\nmodule.exports = HTTP;","map":null,"metadata":{},"sourceType":"script"}