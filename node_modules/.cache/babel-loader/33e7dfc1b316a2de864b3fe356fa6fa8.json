{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\nvar _createClass = require(\"C:\\\\Users\\\\yvesb\\\\Desktop\\\\gms\\\\front-end\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\nvar constants = require('./constants');\nvar MT = constants.MT;\nvar SIMPLE = constants.SIMPLE;\nvar SYMS = constants.SYMS;\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nvar Simple = /*#__PURE__*/function () {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  function Simple(value) {\n    _classCallCheck(this, Simple);\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + typeof value);\n    }\n    if (value < 0 || value > 255 || (value | 0) !== value) {\n      throw new Error('value must be a small positive integer: ' + value);\n    }\n    this.value = value;\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  _createClass(Simple, [{\n    key: \"toString\",\n    value: function toString() {\n      return 'simple(' + this.value + ')';\n    }\n    /**\n     * Debug string for simple value\n     *\n     * @returns {string} simple(value)\n     */\n  }, {\n    key: \"inspect\",\n    value: function inspect() {\n      return 'simple(' + this.value + ')';\n    }\n    /**\n     * Push the simple value onto the CBOR stream\n     *\n     * @param {cbor.Encoder} gen - The generator to push onto\n     * @returns {number}\n     */\n  }, {\n    key: \"encodeCBOR\",\n    value: function encodeCBOR(gen) {\n      return gen._pushInt(this.value, MT.SIMPLE_FLOAT);\n    }\n    /**\n     * Is the given object a Simple?\n     *\n     * @param {any} obj - object to test\n     * @returns {bool} - is it Simple?\n     */\n  }], [{\n    key: \"isSimple\",\n    value: function isSimple(obj) {\n      return obj instanceof Simple;\n    }\n    /**\n     * Decode from the CBOR additional information into a JavaScript value.\n     * If the CBOR item has no parent, return a \"safe\" symbol instead of\n     * `null` or `undefined`, so that the value can be passed through a\n     * stream in object mode.\n     *\n     * @param {number} val - the CBOR additional info to convert\n     * @param {bool} hasParent - Does the CBOR item have a parent?\n     * @returns {(null | undefined | boolean | symbol)} - the decoded value\n     */\n  }, {\n    key: \"decode\",\n    value: function decode(val, hasParent) {\n      if (hasParent == null) {\n        hasParent = true;\n      }\n      switch (val) {\n        case SIMPLE.FALSE:\n          return false;\n        case SIMPLE.TRUE:\n          return true;\n        case SIMPLE.NULL:\n          if (hasParent) {\n            return null;\n          } else {\n            return SYMS.NULL;\n          }\n        case SIMPLE.UNDEFINED:\n          if (hasParent) {\n            return undefined;\n          } else {\n            return SYMS.UNDEFINED;\n          }\n        case -1:\n          if (!hasParent) {\n            throw new Error('Invalid BREAK');\n          }\n          return SYMS.BREAK;\n        default:\n          return new Simple(val);\n      }\n    }\n  }]);\n  return Simple;\n}();\nmodule.exports = Simple;","map":null,"metadata":{},"sourceType":"script"}