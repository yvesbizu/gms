{"ast":null,"code":"'use strict';\n\n/** @typedef {import('./generated-types').ConstantCodeMap} ConstantCodeMap */\n/** @typedef {import('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\n/** @typedef {import('./generated-types').CodeNameMap} CodeNameMap */\n/** @typedef {import('./generated-types').CodecName} CodecName */\n/** @typedef {import('./generated-types').CodecConstant} CodecConstant */\nvar _require = require('./generated-table'),\n  baseTable = _require.baseTable;\nvar varintEncode = require('./util').varintEncode;\nvar nameToVarint = /** @type {NameUint8ArrayMap} */{};\nvar constantToCode = /** @type {ConstantCodeMap} */{};\nvar codeToName = /** @type {CodeNameMap} */{};\n\n// eslint-disable-next-line guard-for-in\nfor (var name in baseTable) {\n  var codecName = /** @type {CodecName} */name;\n  var code = baseTable[codecName];\n  nameToVarint[codecName] = varintEncode(code);\n  var constant = /** @type {CodecConstant} */codecName.toUpperCase().replace(/-/g, '_');\n  constantToCode[constant] = code;\n  if (!codeToName[code]) {\n    codeToName[code] = codecName;\n  }\n}\nObject.freeze(nameToVarint);\nObject.freeze(constantToCode);\nObject.freeze(codeToName);\nvar nameToCode = Object.freeze(baseTable);\nmodule.exports = {\n  nameToVarint: nameToVarint,\n  constantToCode: constantToCode,\n  nameToCode: nameToCode,\n  codeToName: codeToName\n};","map":null,"metadata":{},"sourceType":"script"}