{"ast":null,"code":"'use strict';\n\nvar sortLinks = require('./sortLinks');\nvar DAGLink = require('../dag-link/dagLink');\n\n/**\n * @typedef {import('./dagNode')} DAGNode\n * @typedef {import('../types')} DAGLinkLike\n */\n\n/**\n * @param {*} link\n * @returns {DAGLink}\n */\nvar asDAGLink = function asDAGLink(link) {\n  if (link instanceof DAGLink) {\n    // It's a DAGLink instance\n    // no need to do anything\n    return link;\n  }\n\n  // DAGNode.isDagNode() would be more appropriate here, but it can't be used\n  // as it would lead to circular dependencies as `addLink` is called from\n  // within the DAGNode object.\n  if (!('cid' in link || 'hash' in link || 'Hash' in link || 'multihash' in link)) {\n    throw new Error('Link must be a DAGLink or DAGLink-like. Convert the DAGNode into a DAGLink via `node.toDAGLink()`.');\n  }\n\n  // It's a Object with name, multihash/hash/cid and size\n  // @ts-ignore\n  return new DAGLink(link.Name || link.name, link.Tsize || link.size, link.Hash || link.multihash || link.hash || link.cid);\n};\n\n/**\n * @param {DAGNode} node\n * @param {DAGLink | DAGLinkLike} link\n */\nvar addLink = function addLink(node, link) {\n  var dagLink = asDAGLink(link);\n  node.Links.push(dagLink);\n  sortLinks(node.Links);\n};\nmodule.exports = addLink;","map":null,"metadata":{},"sourceType":"script"}