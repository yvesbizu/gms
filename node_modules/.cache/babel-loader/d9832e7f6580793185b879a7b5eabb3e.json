{"ast":null,"code":"/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n */\n'use strict';\n\nvar constants = require('./constants');\nvar _require = require('./util'),\n  encodeText = _require.encodeText,\n  decodeText = _require.decodeText,\n  concat = _require.concat;\n/** @typedef {import('./base')} Base */\n/** @typedef {import(\"./types\").BaseNameOrCode} BaseNameOrCode */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/**\n * Create a new Uint8Array with the multibase varint+code.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded Uint8Array');\n  }\n  var _encoding = encoding(nameOrCode),\n    name = _encoding.name,\n    codeBuf = _encoding.codeBuf;\n  validEncode(name, buf);\n  return concat([codeBuf, buf], codeBuf.length + buf.length);\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {BaseNameOrCode} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode(nameOrCode, buf) {\n  var enc = encoding(nameOrCode);\n  var data = encodeText(enc.encode(buf));\n  return concat([enc.codeBuf, data], enc.codeBuf.length + data.length);\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Uint8Array}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  }\n  var prefix = data[0];\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase();\n  }\n  var enc = encoding( /** @type {BaseCode} */data[0]);\n  return enc.decode(data.substring(1));\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n */\nfunction isEncoded(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false;\n  }\n  try {\n    var enc = encoding( /** @type {BaseCode} */data[0]);\n    return enc.name;\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {BaseNameOrCode} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode(name, buf) {\n  var enc = encoding(name);\n  enc.decode(decodeText(buf));\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {BaseNameOrCode} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding(nameOrCode) {\n  if (Object.prototype.hasOwnProperty.call(constants.names, /** @type {BaseName} */nameOrCode)) {\n    return constants.names[/** @type {BaseName} */nameOrCode];\n  } else if (Object.prototype.hasOwnProperty.call(constants.codes, /** @type {BaseCode} */nameOrCode)) {\n    return constants.codes[/** @type {BaseCode} */nameOrCode];\n  } else {\n    throw new Error(\"Unsupported encoding: \".concat(nameOrCode));\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData(data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data);\n  }\n  return encoding( /** @type {BaseCode} */data[0]);\n}\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.encoding = encoding;\nexports.encodingFromData = encodingFromData;\nvar names = Object.freeze(constants.names);\nvar codes = Object.freeze(constants.codes);\nexports.names = names;\nexports.codes = codes;","map":null,"metadata":{},"sourceType":"script"}